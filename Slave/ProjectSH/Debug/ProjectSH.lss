
ProjectSH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00000cf8  00000d8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000ae  008000ae  00000dda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000306a  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001045  00000000  00000000  00004152  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015dd  00000000  00000000  00005197  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00006774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ceb  00000000  00000000  00006c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000125b  00000000  00000000  00007913  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00008b6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_4>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	a3 00       	.word	0x00a3	; ????
  56:	b9 00       	.word	0x00b9	; ????
  58:	cf 00       	.word	0x00cf	; ????
  5a:	e5 00       	.word	0x00e5	; ????
  5c:	fb 00       	.word	0x00fb	; ????
  5e:	11 01       	movw	r2, r2
  60:	24 01       	movw	r4, r8
  62:	3a 01       	movw	r6, r20

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e8 ef       	ldi	r30, 0xF8	; 248
  78:	fc e0       	ldi	r31, 0x0C	; 12
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	ae 3a       	cpi	r26, 0xAE	; 174
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	ae ea       	ldi	r26, 0xAE	; 174
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	ab 3b       	cpi	r26, 0xBB	; 187
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 54 03 	call	0x6a8	; 0x6a8 <main>
  9a:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <APP_Init>:
volatile Uint8 last_air_conditioning_value = AIR_CONDTIONING_OFF; // last air conditioning value which will help in hysteresis

PWM_configType _config = {TIMER_0,CLEAR_OC0,F_CPU_1024};
Uint8 request = Default_Ack; //the value that is received from the master

void APP_Init(void){
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	00 d0       	rcall	.+0      	; 0xa8 <APP_Init+0x6>
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	/* *********************** INITIALIZATIONS ******************************* */
	SPI_InitType options = {SLAVE};
	DIO_Init();
  ae:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <DIO_Init>
	LCD_Init();
  b2:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_Init>
	LM35_Init();
  b6:	0e 94 35 03 	call	0x66a	; 0x66a <LM35_Init>
	SPI_Init(options);
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 87 05 	call	0xb0e	; 0xb0e <SPI_Init>
	Servo_init();
  c0:	0e 94 4b 03 	call	0x696	; 0x696 <Servo_init>
	/* ********************************  ************************************* */
	LED_DIR_OUT(ROOM1_LED,Output);
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	80 e1       	ldi	r24, 0x10	; 16
  c8:	0e 94 27 03 	call	0x64e	; 0x64e <LED_DIR_OUT>
	LED_DIR_OUT(ROOM2_LED,Output);
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	81 e1       	ldi	r24, 0x11	; 17
  d0:	0e 94 27 03 	call	0x64e	; 0x64e <LED_DIR_OUT>
	LED_DIR_OUT(ROOM3_LED,Output);
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	82 e1       	ldi	r24, 0x12	; 18
  d8:	0e 94 27 03 	call	0x64e	; 0x64e <LED_DIR_OUT>
	LED_DIR_OUT(ROOM4_LED,Output);
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	83 e1       	ldi	r24, 0x13	; 19
  e0:	0e 94 27 03 	call	0x64e	; 0x64e <LED_DIR_OUT>
	LED_DIR_OUT(ROOM5_LED,Output);
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	84 e1       	ldi	r24, 0x14	; 20
  e8:	0e 94 27 03 	call	0x64e	; 0x64e <LED_DIR_OUT>
	LED_DIR_OUT(Dimmer_LED,Output);
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	8b e0       	ldi	r24, 0x0B	; 11
  f0:	0e 94 27 03 	call	0x64e	; 0x64e <LED_DIR_OUT>
	LED_DIR_OUT(AC_LED,Output);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 27 03 	call	0x64e	; 0x64e <LED_DIR_OUT>
	/* ********************************  ************************************* */
	
	PWM_configType Motor_config = {TIMER_2,CLEAR_OC0,F_CPU_1024};
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	89 83       	std	Y+1, r24	; 0x01
 100:	8a 83       	std	Y+2, r24	; 0x02
 102:	85 e0       	ldi	r24, 0x05	; 5
 104:	8b 83       	std	Y+3, r24	; 0x03
	Motor_init(&Motor_config);
 106:	ce 01       	movw	r24, r28
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	0e 94 42 03 	call	0x684	; 0x684 <Motor_init>
	Motor_speed(&Motor_config,125);
 10e:	6d e7       	ldi	r22, 0x7D	; 125
 110:	ce 01       	movw	r24, r28
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	0e 94 45 03 	call	0x68a	; 0x68a <Motor_speed>
	sei();
 118:	78 94       	sei
	
	/* ********************************  ************************************* */
}
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <APP_Start>:
void APP_Start(void){
	request = SPI_TxRx(Default_Ack);
 126:	85 e5       	ldi	r24, 0x55	; 85
 128:	0e 94 b6 05 	call	0xb6c	; 0xb6c <SPI_TxRx>
 12c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	switch(request){
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	f1 97       	sbiw	r30, 0x31	; 49
 136:	e8 30       	cpi	r30, 0x08	; 8
 138:	f1 05       	cpc	r31, r1
 13a:	08 f0       	brcs	.+2      	; 0x13e <APP_Start+0x18>
 13c:	a9 c0       	rjmp	.+338    	; 0x290 <APP_Start+0x16a>
 13e:	e6 5d       	subi	r30, 0xD6	; 214
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__tablejump2__>
		case ROOM1:
		if(LED_ReadStatus(ROOM1_LED) == 1){
 146:	80 e1       	ldi	r24, 0x10	; 16
 148:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	31 f4       	brne	.+12     	; 0x15c <APP_Start+0x36>
			LCD_Clear();
 150:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Clear>
			LED_TurnOff(ROOM1_LED);
 154:	80 e1       	ldi	r24, 0x10	; 16
 156:	0e 94 2e 03 	call	0x65c	; 0x65c <LED_TurnOff>
			break;
 15a:	08 95       	ret
		}
		else if(LED_ReadStatus(ROOM1_LED) == 0){
 15c:	80 e1       	ldi	r24, 0x10	; 16
 15e:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 162:	81 11       	cpse	r24, r1
 164:	06 c0       	rjmp	.+12     	; 0x172 <APP_Start+0x4c>
			LCD_Clear();
 166:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Clear>
			LED_TurnOn(ROOM1_LED);
 16a:	80 e1       	ldi	r24, 0x10	; 16
 16c:	0e 94 2a 03 	call	0x654	; 0x654 <LED_TurnOn>
			break;
 170:	08 95       	ret
		}
		else{
			//Nothing
		}
		case ROOM2:
		if(LED_ReadStatus(ROOM2_LED) == 1){
 172:	81 e1       	ldi	r24, 0x11	; 17
 174:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	31 f4       	brne	.+12     	; 0x188 <APP_Start+0x62>
			LCD_Clear();
 17c:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Clear>
			LED_TurnOff(ROOM2_LED);
 180:	81 e1       	ldi	r24, 0x11	; 17
 182:	0e 94 2e 03 	call	0x65c	; 0x65c <LED_TurnOff>
			break;
 186:	08 95       	ret
		}
		else if(LED_ReadStatus(ROOM2_LED) == 0){
 188:	81 e1       	ldi	r24, 0x11	; 17
 18a:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 18e:	81 11       	cpse	r24, r1
 190:	06 c0       	rjmp	.+12     	; 0x19e <APP_Start+0x78>
			LCD_Clear();
 192:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Clear>
			LED_TurnOn(ROOM2_LED);
 196:	81 e1       	ldi	r24, 0x11	; 17
 198:	0e 94 2a 03 	call	0x654	; 0x654 <LED_TurnOn>
			break;
 19c:	08 95       	ret
		else{
			//Nothing
		}
		
		case ROOM3:
		if(LED_ReadStatus(ROOM3_LED) == 1){
 19e:	82 e1       	ldi	r24, 0x12	; 18
 1a0:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	31 f4       	brne	.+12     	; 0x1b4 <APP_Start+0x8e>
			LCD_Clear();
 1a8:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Clear>
			LED_TurnOff(ROOM3_LED);
 1ac:	82 e1       	ldi	r24, 0x12	; 18
 1ae:	0e 94 2e 03 	call	0x65c	; 0x65c <LED_TurnOff>
			break;
 1b2:	08 95       	ret
		}
		else if(LED_ReadStatus(ROOM3_LED) == 0){
 1b4:	82 e1       	ldi	r24, 0x12	; 18
 1b6:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 1ba:	81 11       	cpse	r24, r1
 1bc:	06 c0       	rjmp	.+12     	; 0x1ca <APP_Start+0xa4>
			LCD_Clear();
 1be:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Clear>
			LED_TurnOn(ROOM3_LED);
 1c2:	82 e1       	ldi	r24, 0x12	; 18
 1c4:	0e 94 2a 03 	call	0x654	; 0x654 <LED_TurnOn>
			break;
 1c8:	08 95       	ret
		else{
			//Nothing
		}
		
		case ROOM4:
		if(LED_ReadStatus(ROOM4_LED) == 1){
 1ca:	83 e1       	ldi	r24, 0x13	; 19
 1cc:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	31 f4       	brne	.+12     	; 0x1e0 <APP_Start+0xba>
			LCD_Clear();
 1d4:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Clear>
			LED_TurnOff(ROOM4_LED);
 1d8:	83 e1       	ldi	r24, 0x13	; 19
 1da:	0e 94 2e 03 	call	0x65c	; 0x65c <LED_TurnOff>
			break;
 1de:	08 95       	ret
		}
		else if(LED_ReadStatus(ROOM4_LED) == 0){
 1e0:	83 e1       	ldi	r24, 0x13	; 19
 1e2:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 1e6:	81 11       	cpse	r24, r1
 1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <APP_Start+0xd0>
			LCD_Clear();
 1ea:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Clear>
			LED_TurnOn(ROOM4_LED);
 1ee:	83 e1       	ldi	r24, 0x13	; 19
 1f0:	0e 94 2a 03 	call	0x654	; 0x654 <LED_TurnOn>
			break;
 1f4:	08 95       	ret
		else{
			//Nothing
		}
		
		case ROOM5:
		if(LED_ReadStatus(ROOM5_LED) == 1){
 1f6:	84 e1       	ldi	r24, 0x14	; 20
 1f8:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	31 f4       	brne	.+12     	; 0x20c <APP_Start+0xe6>
			LCD_Clear();
 200:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Clear>
			LED_TurnOff(ROOM5_LED);
 204:	84 e1       	ldi	r24, 0x14	; 20
 206:	0e 94 2e 03 	call	0x65c	; 0x65c <LED_TurnOff>
			break;
 20a:	08 95       	ret
		}
		else if(LED_ReadStatus(ROOM5_LED) == 0){
 20c:	84 e1       	ldi	r24, 0x14	; 20
 20e:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 212:	81 11       	cpse	r24, r1
 214:	3d c0       	rjmp	.+122    	; 0x290 <APP_Start+0x16a>
			LCD_Clear();
 216:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Clear>
			LED_TurnOn(ROOM5_LED);
 21a:	84 e1       	ldi	r24, 0x14	; 20
 21c:	0e 94 2a 03 	call	0x654	; 0x654 <LED_TurnOn>
			break;
 220:	08 95       	ret
			//Nothing
			break;
		}
		
		case Dimmer:
		if(dimmer_state == 0){
 222:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <dimmer_state>
 226:	81 11       	cpse	r24, r1
 228:	0a c0       	rjmp	.+20     	; 0x23e <APP_Start+0x118>
			PWM_init(&_config);
 22a:	81 e6       	ldi	r24, 0x61	; 97
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 dd 05 	call	0xbba	; 0xbba <PWM_init>
			dimmer_state++;
 232:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <dimmer_state>
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <dimmer_state>
 23c:	08 95       	ret
		}
		else{
			PWM_TurnOff();
 23e:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM_TurnOff>
			dimmer_state = 0;
 242:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <dimmer_state>
 246:	08 95       	ret
		}
		break;

		case AC:
		if(LED_ReadStatus(AC_LED) == 1){
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	31 f4       	brne	.+12     	; 0x25e <APP_Start+0x138>
			LCD_Clear();
 252:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Clear>
			LED_TurnOff(AC_LED);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 2e 03 	call	0x65c	; 0x65c <LED_TurnOff>
			break;
 25c:	08 95       	ret
		}
		else if(LED_ReadStatus(AC_LED) == 0){
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 264:	81 11       	cpse	r24, r1
 266:	14 c0       	rjmp	.+40     	; 0x290 <APP_Start+0x16a>
			LCD_Clear();
 268:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Clear>
			LED_TurnOn(AC_LED);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 2a 03 	call	0x654	; 0x654 <LED_TurnOn>
			break;
 272:	08 95       	ret
		}
		break;
		
		case DOOR:
		
		if(Door_state == 0){
 274:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <Door_state>
 278:	81 11       	cpse	r24, r1
 27a:	06 c0       	rjmp	.+12     	; 0x288 <APP_Start+0x162>
			Servo_Open();
 27c:	0e 94 4e 03 	call	0x69c	; 0x69c <Servo_Open>
			Door_state = 1;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <Door_state>
 286:	08 95       	ret
		}
		else {
			Servo_Close();
 288:	0e 94 51 03 	call	0x6a2	; 0x6a2 <Servo_Close>
			Door_state = 0;
 28c:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <Door_state>
 290:	08 95       	ret

00000292 <__vector_11>:
		
	}
}


ISR(TIMER0_OVF_vect){
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	2a 97       	sbiw	r28, 0x0a	; 10
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	cd bf       	out	0x3d, r28	; 61
	count++;
 2c2:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <count>
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <count>
	Uint8 dudd[10];
	if(count == 30){
 2cc:	8e 31       	cpi	r24, 0x1E	; 30
 2ce:	61 f4       	brne	.+24     	; 0x2e8 <__vector_11+0x56>
		duty = ADC_Read(ADC_CHANNEL2);
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	0e 94 6f 03 	call	0x6de	; 0x6de <ADC_Read>
 2d6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <duty>
		PWM_changeDuty(&_config, duty);
 2da:	68 2f       	mov	r22, r24
 2dc:	81 e6       	ldi	r24, 0x61	; 97
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 29 06 	call	0xc52	; 0xc52 <PWM_changeDuty>
		count =0;
 2e4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <count>
	}
	itoa(duty,dudd,10);
 2e8:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <duty>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2ec:	4a e0       	ldi	r20, 0x0A	; 10
 2ee:	be 01       	movw	r22, r28
 2f0:	6f 5f       	subi	r22, 0xFF	; 255
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 45 06 	call	0xc8a	; 0xc8a <__itoa_ncheck>
}
 2fa:	2a 96       	adiw	r28, 0x0a	; 10
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	de bf       	out	0x3e, r29	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	cd bf       	out	0x3d, r28	; 61
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	bf 91       	pop	r27
 310:	af 91       	pop	r26
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	7f 91       	pop	r23
 318:	6f 91       	pop	r22
 31a:	5f 91       	pop	r21
 31c:	4f 91       	pop	r20
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 32c:	1f 92       	push	r1
 32e:	0f 92       	push	r0
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	0f 92       	push	r0
 334:	11 24       	eor	r1, r1
 336:	2f 93       	push	r18
 338:	3f 93       	push	r19
 33a:	4f 93       	push	r20
 33c:	5f 93       	push	r21
 33e:	6f 93       	push	r22
 340:	7f 93       	push	r23
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	af 93       	push	r26
 348:	bf 93       	push	r27
 34a:	ef 93       	push	r30
 34c:	ff 93       	push	r31
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	a8 97       	sbiw	r28, 0x28	; 40
 358:	de bf       	out	0x3e, r29	; 62
 35a:	cd bf       	out	0x3d, r28	; 61
	Uint16 temp[20];
	counter++;	//count the ticks of the timer zero
 35c:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <counter>
 360:	8f 5f       	subi	r24, 0xFF	; 255
 362:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <counter>
	if(counter >= 61) //do that code every 1 sec (61 ticks with 1024 prescaler)
 366:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <counter>
 36a:	8d 33       	cpi	r24, 0x3D	; 61
 36c:	08 f4       	brcc	.+2      	; 0x370 <__vector_4+0x44>
 36e:	96 c0       	rjmp	.+300    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
	{
		counter=0;//clear the counter of ticks
 370:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <counter>
		
		LCD_String("Temp; ");
 374:	86 ea       	ldi	r24, 0xA6	; 166
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 10 03 	call	0x620	; 0x620 <LCD_String>
		temp_sensor_reading = LM35_Read(ADC_CHANNEL0);
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 38 03 	call	0x670	; 0x670 <LM35_Read>
 382:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <temp_sensor_reading+0x1>
 386:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <temp_sensor_reading>
		itoa(temp_sensor_reading,temp,10);
 38a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <temp_sensor_reading>
 38e:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <temp_sensor_reading+0x1>
 392:	4a e0       	ldi	r20, 0x0A	; 10
 394:	be 01       	movw	r22, r28
 396:	6f 5f       	subi	r22, 0xFF	; 255
 398:	7f 4f       	sbci	r23, 0xFF	; 255
 39a:	0e 94 45 06 	call	0xc8a	; 0xc8a <__itoa_ncheck>
		LCD_String(temp);
 39e:	ce 01       	movw	r24, r28
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	0e 94 10 03 	call	0x620	; 0x620 <LCD_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a6:	2f ef       	ldi	r18, 0xFF	; 255
 3a8:	83 ec       	ldi	r24, 0xC3	; 195
 3aa:	99 e0       	ldi	r25, 0x09	; 9
 3ac:	21 50       	subi	r18, 0x01	; 1
 3ae:	80 40       	sbci	r24, 0x00	; 0
 3b0:	90 40       	sbci	r25, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <__vector_4+0x80>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <__vector_4+0x8a>
 3b6:	00 00       	nop
		_delay_ms(200);
		LCD_Clear();
 3b8:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Clear>
		
		if ((temp_sensor_reading >= Active_temperature) && LED_ReadStatus(AC_LED) == 1)//do that code if the read temperature if greater than required temperature by one or more
 3bc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Active_temperature>
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <temp_sensor_reading>
 3c6:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <temp_sensor_reading+0x1>
 3ca:	28 17       	cp	r18, r24
 3cc:	39 07       	cpc	r19, r25
 3ce:	88 f0       	brcs	.+34     	; 0x3f2 <__vector_4+0xc6>
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	61 f4       	brne	.+24     	; 0x3f2 <__vector_4+0xc6>
		{
			
			Motor_set_dir(MotorPin1,STD_Low);
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	88 e1       	ldi	r24, 0x18	; 24
 3de:	0e 94 48 03 	call	0x690	; 0x690 <Motor_set_dir>
			Motor_set_dir(MotorPin2,STD_High);
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	89 e1       	ldi	r24, 0x19	; 25
 3e6:	0e 94 48 03 	call	0x690	; 0x690 <Motor_set_dir>

			last_air_conditioning_value = AIR_CONDTIONING_ON; //save the value of the state of the air conditioning
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
 3f0:	55 c0       	rjmp	.+170    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
		}
		else if (temp_sensor_reading <= Disabled_temperature) //do that code if the read temperature if lesser than required temperature by one or more
 3f2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Disabled_temperature>
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <temp_sensor_reading>
 3fc:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <temp_sensor_reading+0x1>
 400:	82 17       	cp	r24, r18
 402:	93 07       	cpc	r25, r19
 404:	58 f0       	brcs	.+22     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		{
			
			last_air_conditioning_value = AIR_CONDTIONING_OFF; //save the value of the state of the air conditioning
 406:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__data_end>
			Motor_set_dir(MotorPin1,STD_Low);
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	88 e1       	ldi	r24, 0x18	; 24
 40e:	0e 94 48 03 	call	0x690	; 0x690 <Motor_set_dir>
			Motor_set_dir(MotorPin2,STD_Low);
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	89 e1       	ldi	r24, 0x19	; 25
 416:	0e 94 48 03 	call	0x690	; 0x690 <Motor_set_dir>
 41a:	40 c0       	rjmp	.+128    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
		}
		else if ((temp_sensor_reading >= Disabled_temperature && temp_sensor_reading <= Active_temperature) && LED_ReadStatus(AC_LED) == 1){	//do that code if the read temperature is equal to the required temperature
 41c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Disabled_temperature>
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <temp_sensor_reading>
 426:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <temp_sensor_reading+0x1>
 42a:	28 17       	cp	r18, r24
 42c:	39 07       	cpc	r19, r25
 42e:	48 f1       	brcs	.+82     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 430:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Active_temperature>
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <temp_sensor_reading>
 43a:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <temp_sensor_reading+0x1>
 43e:	82 17       	cp	r24, r18
 440:	93 07       	cpc	r25, r19
 442:	f8 f0       	brcs	.+62     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	d1 f4       	brne	.+52     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
			
			if (last_air_conditioning_value == AIR_CONDTIONING_ON){	//in the case of the last saved status of the air conditioning was on
 44e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	49 f4       	brne	.+18     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
				Motor_set_dir(MotorPin1,STD_Low);
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	88 e1       	ldi	r24, 0x18	; 24
 45a:	0e 94 48 03 	call	0x690	; 0x690 <Motor_set_dir>
				Motor_set_dir(MotorPin2,STD_High);
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	89 e1       	ldi	r24, 0x19	; 25
 462:	0e 94 48 03 	call	0x690	; 0x690 <Motor_set_dir>
 466:	1a c0       	rjmp	.+52     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
			}
			else if (last_air_conditioning_value == AIR_CONDTIONING_OFF){	//in the case of the last saved status of the air conditioning was off
 468:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 46c:	81 11       	cpse	r24, r1
 46e:	16 c0       	rjmp	.+44     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
				
				Motor_set_dir(MotorPin1,STD_Low);
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	88 e1       	ldi	r24, 0x18	; 24
 474:	0e 94 48 03 	call	0x690	; 0x690 <Motor_set_dir>
				Motor_set_dir(MotorPin2,STD_Low);
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	89 e1       	ldi	r24, 0x19	; 25
 47c:	0e 94 48 03 	call	0x690	; 0x690 <Motor_set_dir>
 480:	0d c0       	rjmp	.+26     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
			}
		}
		else if (LED_ReadStatus(AC_LED) == 0){
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	0e 94 32 03 	call	0x664	; 0x664 <LED_ReadStatus>
 488:	81 11       	cpse	r24, r1
 48a:	08 c0       	rjmp	.+16     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
			Motor_set_dir(MotorPin1,STD_Low);
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	88 e1       	ldi	r24, 0x18	; 24
 490:	0e 94 48 03 	call	0x690	; 0x690 <Motor_set_dir>
			Motor_set_dir(MotorPin2,STD_Low);
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	89 e1       	ldi	r24, 0x19	; 25
 498:	0e 94 48 03 	call	0x690	; 0x690 <Motor_set_dir>
		}
	}
}
 49c:	a8 96       	adiw	r28, 0x28	; 40
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	f8 94       	cli
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	cd bf       	out	0x3d, r28	; 61
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	ff 91       	pop	r31
 4ae:	ef 91       	pop	r30
 4b0:	bf 91       	pop	r27
 4b2:	af 91       	pop	r26
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	7f 91       	pop	r23
 4ba:	6f 91       	pop	r22
 4bc:	5f 91       	pop	r21
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <Enable_CLK>:
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	8b e1       	ldi	r24, 0x1B	; 27
 4d2:	0e 94 83 03 	call	0x706	; 0x706 <DIO_WriteChannel>
 4d6:	8f e8       	ldi	r24, 0x8F	; 143
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <Enable_CLK+0xc>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <Enable_CLK+0x12>
 4e0:	00 00       	nop
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	8b e1       	ldi	r24, 0x1B	; 27
 4e6:	0e 94 83 03 	call	0x706	; 0x706 <DIO_WriteChannel>
 4ea:	8f e8       	ldi	r24, 0x8F	; 143
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <Enable_CLK+0x20>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <Enable_CLK+0x26>
 4f4:	00 00       	nop
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	8b e1       	ldi	r24, 0x1B	; 27
 4fa:	0e 94 83 03 	call	0x706	; 0x706 <DIO_WriteChannel>
 4fe:	08 95       	ret

00000500 <LCD_Cmd>:
 500:	cf 93       	push	r28
 502:	c8 2f       	mov	r28, r24
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	89 e0       	ldi	r24, 0x09	; 9
 508:	0e 94 83 03 	call	0x706	; 0x706 <DIO_WriteChannel>
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	0e 94 3d 04 	call	0x87a	; 0x87a <DIO_ReadPort>
 512:	8f 70       	andi	r24, 0x0F	; 15
 514:	9c 2f       	mov	r25, r28
 516:	90 7f       	andi	r25, 0xF0	; 240
 518:	68 2f       	mov	r22, r24
 51a:	69 2b       	or	r22, r25
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	0e 94 4f 04 	call	0x89e	; 0x89e <DIO_WritePort>
 522:	0e 94 67 02 	call	0x4ce	; 0x4ce <Enable_CLK>
 526:	8f e1       	ldi	r24, 0x1F	; 31
 528:	9e e4       	ldi	r25, 0x4E	; 78
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <LCD_Cmd+0x2a>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <LCD_Cmd+0x30>
 530:	00 00       	nop
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	0e 94 3d 04 	call	0x87a	; 0x87a <DIO_ReadPort>
 538:	90 e1       	ldi	r25, 0x10	; 16
 53a:	c9 9f       	mul	r28, r25
 53c:	90 01       	movw	r18, r0
 53e:	11 24       	eor	r1, r1
 540:	8f 70       	andi	r24, 0x0F	; 15
 542:	68 2f       	mov	r22, r24
 544:	62 2b       	or	r22, r18
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	0e 94 4f 04 	call	0x89e	; 0x89e <DIO_WritePort>
 54c:	0e 94 67 02 	call	0x4ce	; 0x4ce <Enable_CLK>
 550:	8f e1       	ldi	r24, 0x1F	; 31
 552:	9e e4       	ldi	r25, 0x4E	; 78
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <LCD_Cmd+0x54>
 558:	00 c0       	rjmp	.+0      	; 0x55a <LCD_Cmd+0x5a>
 55a:	00 00       	nop
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <LCD_Init>:
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	8a e0       	ldi	r24, 0x0A	; 10
 564:	0e 94 83 03 	call	0x706	; 0x706 <DIO_WriteChannel>
 568:	61 e0       	ldi	r22, 0x01	; 1
 56a:	8b e1       	ldi	r24, 0x1B	; 27
 56c:	0e 94 83 03 	call	0x706	; 0x706 <DIO_WriteChannel>
 570:	2f ef       	ldi	r18, 0xFF	; 255
 572:	89 ef       	ldi	r24, 0xF9	; 249
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	21 50       	subi	r18, 0x01	; 1
 578:	80 40       	sbci	r24, 0x00	; 0
 57a:	90 40       	sbci	r25, 0x00	; 0
 57c:	e1 f7       	brne	.-8      	; 0x576 <LCD_Init+0x16>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <LCD_Init+0x20>
 580:	00 00       	nop
 582:	83 e3       	ldi	r24, 0x33	; 51
 584:	0e 94 80 02 	call	0x500	; 0x500 <LCD_Cmd>
 588:	8f e8       	ldi	r24, 0x8F	; 143
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <LCD_Init+0x2c>
 590:	00 c0       	rjmp	.+0      	; 0x592 <LCD_Init+0x32>
 592:	00 00       	nop
 594:	82 e3       	ldi	r24, 0x32	; 50
 596:	0e 94 80 02 	call	0x500	; 0x500 <LCD_Cmd>
 59a:	88 e2       	ldi	r24, 0x28	; 40
 59c:	0e 94 80 02 	call	0x500	; 0x500 <LCD_Cmd>
 5a0:	8f e8       	ldi	r24, 0x8F	; 143
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <LCD_Init+0x44>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <LCD_Init+0x4a>
 5aa:	00 00       	nop
 5ac:	8e e0       	ldi	r24, 0x0E	; 14
 5ae:	0e 94 80 02 	call	0x500	; 0x500 <LCD_Cmd>
 5b2:	86 e0       	ldi	r24, 0x06	; 6
 5b4:	0e 94 80 02 	call	0x500	; 0x500 <LCD_Cmd>
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 80 02 	call	0x500	; 0x500 <LCD_Cmd>
 5be:	08 95       	ret

000005c0 <LCD_Char>:
 5c0:	cf 93       	push	r28
 5c2:	c8 2f       	mov	r28, r24
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	89 e0       	ldi	r24, 0x09	; 9
 5c8:	0e 94 83 03 	call	0x706	; 0x706 <DIO_WriteChannel>
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	0e 94 3d 04 	call	0x87a	; 0x87a <DIO_ReadPort>
 5d2:	8f 70       	andi	r24, 0x0F	; 15
 5d4:	9c 2f       	mov	r25, r28
 5d6:	90 7f       	andi	r25, 0xF0	; 240
 5d8:	68 2f       	mov	r22, r24
 5da:	69 2b       	or	r22, r25
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	0e 94 4f 04 	call	0x89e	; 0x89e <DIO_WritePort>
 5e2:	0e 94 67 02 	call	0x4ce	; 0x4ce <Enable_CLK>
 5e6:	8f e1       	ldi	r24, 0x1F	; 31
 5e8:	9e e4       	ldi	r25, 0x4E	; 78
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <LCD_Char+0x2a>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <LCD_Char+0x30>
 5f0:	00 00       	nop
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	0e 94 3d 04 	call	0x87a	; 0x87a <DIO_ReadPort>
 5f8:	90 e1       	ldi	r25, 0x10	; 16
 5fa:	c9 9f       	mul	r28, r25
 5fc:	90 01       	movw	r18, r0
 5fe:	11 24       	eor	r1, r1
 600:	8f 70       	andi	r24, 0x0F	; 15
 602:	68 2f       	mov	r22, r24
 604:	62 2b       	or	r22, r18
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	0e 94 4f 04 	call	0x89e	; 0x89e <DIO_WritePort>
 60c:	0e 94 67 02 	call	0x4ce	; 0x4ce <Enable_CLK>
 610:	8f e3       	ldi	r24, 0x3F	; 63
 612:	9f e1       	ldi	r25, 0x1F	; 31
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <LCD_Char+0x54>
 618:	00 c0       	rjmp	.+0      	; 0x61a <LCD_Char+0x5a>
 61a:	00 00       	nop
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret

00000620 <LCD_String>:
 620:	0f 93       	push	r16
 622:	1f 93       	push	r17
 624:	cf 93       	push	r28
 626:	8c 01       	movw	r16, r24
 628:	c0 e0       	ldi	r28, 0x00	; 0
 62a:	03 c0       	rjmp	.+6      	; 0x632 <LCD_String+0x12>
 62c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCD_Char>
 630:	cf 5f       	subi	r28, 0xFF	; 255
 632:	f8 01       	movw	r30, r16
 634:	ec 0f       	add	r30, r28
 636:	f1 1d       	adc	r31, r1
 638:	80 81       	ld	r24, Z
 63a:	81 11       	cpse	r24, r1
 63c:	f7 cf       	rjmp	.-18     	; 0x62c <LCD_String+0xc>
 63e:	cf 91       	pop	r28
 640:	1f 91       	pop	r17
 642:	0f 91       	pop	r16
 644:	08 95       	ret

00000646 <LCD_Clear>:
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 80 02 	call	0x500	; 0x500 <LCD_Cmd>
 64c:	08 95       	ret

0000064e <LED_DIR_OUT>:
 64e:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_ConfigureChannel>
 652:	08 95       	ret

00000654 <LED_TurnOn>:
 654:	61 e0       	ldi	r22, 0x01	; 1
 656:	0e 94 83 03 	call	0x706	; 0x706 <DIO_WriteChannel>
 65a:	08 95       	ret

0000065c <LED_TurnOff>:
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	0e 94 83 03 	call	0x706	; 0x706 <DIO_WriteChannel>
 662:	08 95       	ret

00000664 <LED_ReadStatus>:
 664:	0e 94 05 04 	call	0x80a	; 0x80a <DIO_ReadChannel>
 668:	08 95       	ret

0000066a <LM35_Init>:
 66a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <ADC_Init>
 66e:	08 95       	ret

00000670 <LM35_Read>:
 670:	0e 94 6f 03 	call	0x6de	; 0x6de <ADC_Read>
 674:	99 23       	and	r25, r25
 676:	0c f4       	brge	.+2      	; 0x67a <LM35_Read+0xa>
 678:	03 96       	adiw	r24, 0x03	; 3
 67a:	95 95       	asr	r25
 67c:	87 95       	ror	r24
 67e:	95 95       	asr	r25
 680:	87 95       	ror	r24
 682:	08 95       	ret

00000684 <Motor_init>:

#include "Motor.h"
#include "DIO.h"

void Motor_init(const PWM_configType * config_Ptr){
	PWM_init(config_Ptr);
 684:	0e 94 dd 05 	call	0xbba	; 0xbba <PWM_init>
 688:	08 95       	ret

0000068a <Motor_speed>:
}
void Motor_speed(const PWM_configType * config_Ptr,Uint8 a_duty){
	PWM_changeDuty(config_Ptr,a_duty);
 68a:	0e 94 29 06 	call	0xc52	; 0xc52 <PWM_changeDuty>
 68e:	08 95       	ret

00000690 <Motor_set_dir>:
}

void Motor_set_dir(Uint8 Channel,Uint8 Level){
	DIO_WriteChannel(Channel, Level);
 690:	0e 94 83 03 	call	0x706	; 0x706 <DIO_WriteChannel>
 694:	08 95       	ret

00000696 <Servo_init>:
 696:	0e 94 bb 05 	call	0xb76	; 0xb76 <Timer1_init>
 69a:	08 95       	ret

0000069c <Servo_Open>:
 69c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <Timer1_90>
 6a0:	08 95       	ret

000006a2 <Servo_Close>:
 6a2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <Timer1_0>
 6a6:	08 95       	ret

000006a8 <main>:
#include <util/delay.h>
#include "APP.h"

int main(){
	
	APP_Init();
 6a8:	0e 94 51 00 	call	0xa2	; 0xa2 <APP_Init>
	while(1){
		APP_Start();
 6ac:	0e 94 93 00 	call	0x126	; 0x126 <APP_Start>
 6b0:	fd cf       	rjmp	.-6      	; 0x6ac <main+0x4>

000006b2 <ADC_Init>:
 6b2:	87 b1       	in	r24, 0x07	; 7
 6b4:	80 64       	ori	r24, 0x40	; 64
 6b6:	87 b9       	out	0x07, r24	; 7
 6b8:	87 b1       	in	r24, 0x07	; 7
 6ba:	80 68       	ori	r24, 0x80	; 128
 6bc:	87 b9       	out	0x07, r24	; 7
 6be:	86 b1       	in	r24, 0x06	; 6
 6c0:	80 68       	ori	r24, 0x80	; 128
 6c2:	86 b9       	out	0x06, r24	; 6
 6c4:	86 b1       	in	r24, 0x06	; 6
 6c6:	88 60       	ori	r24, 0x08	; 8
 6c8:	86 b9       	out	0x06, r24	; 6
 6ca:	86 b1       	in	r24, 0x06	; 6
 6cc:	81 60       	ori	r24, 0x01	; 1
 6ce:	86 b9       	out	0x06, r24	; 6
 6d0:	86 b1       	in	r24, 0x06	; 6
 6d2:	82 60       	ori	r24, 0x02	; 2
 6d4:	86 b9       	out	0x06, r24	; 6
 6d6:	86 b1       	in	r24, 0x06	; 6
 6d8:	84 60       	ori	r24, 0x04	; 4
 6da:	86 b9       	out	0x06, r24	; 6
 6dc:	08 95       	ret

000006de <ADC_Read>:
 6de:	97 b1       	in	r25, 0x07	; 7
 6e0:	90 7e       	andi	r25, 0xE0	; 224
 6e2:	8f 71       	andi	r24, 0x1F	; 31
 6e4:	89 2b       	or	r24, r25
 6e6:	87 b9       	out	0x07, r24	; 7
 6e8:	86 b1       	in	r24, 0x06	; 6
 6ea:	80 64       	ori	r24, 0x40	; 64
 6ec:	86 b9       	out	0x06, r24	; 6
 6ee:	34 9b       	sbis	0x06, 4	; 6
 6f0:	fe cf       	rjmp	.-4      	; 0x6ee <ADC_Read+0x10>
 6f2:	86 b1       	in	r24, 0x06	; 6
 6f4:	80 61       	ori	r24, 0x10	; 16
 6f6:	86 b9       	out	0x06, r24	; 6
 6f8:	24 b1       	in	r18, 0x04	; 4
 6fa:	85 b1       	in	r24, 0x05	; 5
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	98 2f       	mov	r25, r24
 700:	88 27       	eor	r24, r24
 702:	82 2b       	or	r24, r18
 704:	08 95       	ret

00000706 <DIO_WriteChannel>:
 706:	98 2f       	mov	r25, r24
 708:	96 95       	lsr	r25
 70a:	96 95       	lsr	r25
 70c:	96 95       	lsr	r25
 70e:	87 70       	andi	r24, 0x07	; 7
 710:	91 30       	cpi	r25, 0x01	; 1
 712:	21 f1       	breq	.+72     	; 0x75c <DIO_WriteChannel+0x56>
 714:	30 f0       	brcs	.+12     	; 0x722 <DIO_WriteChannel+0x1c>
 716:	92 30       	cpi	r25, 0x02	; 2
 718:	f1 f1       	breq	.+124    	; 0x796 <DIO_WriteChannel+0x90>
 71a:	93 30       	cpi	r25, 0x03	; 3
 71c:	09 f4       	brne	.+2      	; 0x720 <DIO_WriteChannel+0x1a>
 71e:	58 c0       	rjmp	.+176    	; 0x7d0 <DIO_WriteChannel+0xca>
 720:	08 95       	ret
 722:	61 30       	cpi	r22, 0x01	; 1
 724:	69 f4       	brne	.+26     	; 0x740 <DIO_WriteChannel+0x3a>
 726:	4b b3       	in	r20, 0x1b	; 27
 728:	21 e0       	ldi	r18, 0x01	; 1
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	b9 01       	movw	r22, r18
 72e:	02 c0       	rjmp	.+4      	; 0x734 <DIO_WriteChannel+0x2e>
 730:	66 0f       	add	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	8a 95       	dec	r24
 736:	e2 f7       	brpl	.-8      	; 0x730 <DIO_WriteChannel+0x2a>
 738:	cb 01       	movw	r24, r22
 73a:	84 2b       	or	r24, r20
 73c:	8b bb       	out	0x1b, r24	; 27
 73e:	08 95       	ret
 740:	4b b3       	in	r20, 0x1b	; 27
 742:	21 e0       	ldi	r18, 0x01	; 1
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	b9 01       	movw	r22, r18
 748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_WriteChannel+0x48>
 74a:	66 0f       	add	r22, r22
 74c:	77 1f       	adc	r23, r23
 74e:	8a 95       	dec	r24
 750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_WriteChannel+0x44>
 752:	cb 01       	movw	r24, r22
 754:	80 95       	com	r24
 756:	84 23       	and	r24, r20
 758:	8b bb       	out	0x1b, r24	; 27
 75a:	08 95       	ret
 75c:	61 30       	cpi	r22, 0x01	; 1
 75e:	69 f4       	brne	.+26     	; 0x77a <DIO_WriteChannel+0x74>
 760:	48 b3       	in	r20, 0x18	; 24
 762:	21 e0       	ldi	r18, 0x01	; 1
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	b9 01       	movw	r22, r18
 768:	02 c0       	rjmp	.+4      	; 0x76e <DIO_WriteChannel+0x68>
 76a:	66 0f       	add	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	8a 95       	dec	r24
 770:	e2 f7       	brpl	.-8      	; 0x76a <DIO_WriteChannel+0x64>
 772:	cb 01       	movw	r24, r22
 774:	84 2b       	or	r24, r20
 776:	88 bb       	out	0x18, r24	; 24
 778:	08 95       	ret
 77a:	48 b3       	in	r20, 0x18	; 24
 77c:	21 e0       	ldi	r18, 0x01	; 1
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	b9 01       	movw	r22, r18
 782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_WriteChannel+0x82>
 784:	66 0f       	add	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	8a 95       	dec	r24
 78a:	e2 f7       	brpl	.-8      	; 0x784 <DIO_WriteChannel+0x7e>
 78c:	cb 01       	movw	r24, r22
 78e:	80 95       	com	r24
 790:	84 23       	and	r24, r20
 792:	88 bb       	out	0x18, r24	; 24
 794:	08 95       	ret
 796:	61 30       	cpi	r22, 0x01	; 1
 798:	69 f4       	brne	.+26     	; 0x7b4 <DIO_WriteChannel+0xae>
 79a:	45 b3       	in	r20, 0x15	; 21
 79c:	21 e0       	ldi	r18, 0x01	; 1
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	b9 01       	movw	r22, r18
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <DIO_WriteChannel+0xa2>
 7a4:	66 0f       	add	r22, r22
 7a6:	77 1f       	adc	r23, r23
 7a8:	8a 95       	dec	r24
 7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <DIO_WriteChannel+0x9e>
 7ac:	cb 01       	movw	r24, r22
 7ae:	84 2b       	or	r24, r20
 7b0:	85 bb       	out	0x15, r24	; 21
 7b2:	08 95       	ret
 7b4:	45 b3       	in	r20, 0x15	; 21
 7b6:	21 e0       	ldi	r18, 0x01	; 1
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	b9 01       	movw	r22, r18
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <DIO_WriteChannel+0xbc>
 7be:	66 0f       	add	r22, r22
 7c0:	77 1f       	adc	r23, r23
 7c2:	8a 95       	dec	r24
 7c4:	e2 f7       	brpl	.-8      	; 0x7be <DIO_WriteChannel+0xb8>
 7c6:	cb 01       	movw	r24, r22
 7c8:	80 95       	com	r24
 7ca:	84 23       	and	r24, r20
 7cc:	85 bb       	out	0x15, r24	; 21
 7ce:	08 95       	ret
 7d0:	61 30       	cpi	r22, 0x01	; 1
 7d2:	69 f4       	brne	.+26     	; 0x7ee <DIO_WriteChannel+0xe8>
 7d4:	42 b3       	in	r20, 0x12	; 18
 7d6:	21 e0       	ldi	r18, 0x01	; 1
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	b9 01       	movw	r22, r18
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_WriteChannel+0xdc>
 7de:	66 0f       	add	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	8a 95       	dec	r24
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_WriteChannel+0xd8>
 7e6:	cb 01       	movw	r24, r22
 7e8:	84 2b       	or	r24, r20
 7ea:	82 bb       	out	0x12, r24	; 18
 7ec:	08 95       	ret
 7ee:	42 b3       	in	r20, 0x12	; 18
 7f0:	21 e0       	ldi	r18, 0x01	; 1
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	b9 01       	movw	r22, r18
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_WriteChannel+0xf6>
 7f8:	66 0f       	add	r22, r22
 7fa:	77 1f       	adc	r23, r23
 7fc:	8a 95       	dec	r24
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_WriteChannel+0xf2>
 800:	cb 01       	movw	r24, r22
 802:	80 95       	com	r24
 804:	84 23       	and	r24, r20
 806:	82 bb       	out	0x12, r24	; 18
 808:	08 95       	ret

0000080a <DIO_ReadChannel>:
 80a:	98 2f       	mov	r25, r24
 80c:	96 95       	lsr	r25
 80e:	96 95       	lsr	r25
 810:	96 95       	lsr	r25
 812:	48 2f       	mov	r20, r24
 814:	47 70       	andi	r20, 0x07	; 7
 816:	91 30       	cpi	r25, 0x01	; 1
 818:	81 f0       	breq	.+32     	; 0x83a <DIO_ReadChannel+0x30>
 81a:	28 f0       	brcs	.+10     	; 0x826 <DIO_ReadChannel+0x1c>
 81c:	92 30       	cpi	r25, 0x02	; 2
 81e:	b9 f0       	breq	.+46     	; 0x84e <DIO_ReadChannel+0x44>
 820:	93 30       	cpi	r25, 0x03	; 3
 822:	f9 f0       	breq	.+62     	; 0x862 <__stack+0x3>
 824:	28 c0       	rjmp	.+80     	; 0x876 <__stack+0x17>
 826:	99 b3       	in	r25, 0x19	; 25
 828:	89 2f       	mov	r24, r25
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <DIO_ReadChannel+0x28>
 82e:	95 95       	asr	r25
 830:	87 95       	ror	r24
 832:	4a 95       	dec	r20
 834:	e2 f7       	brpl	.-8      	; 0x82e <DIO_ReadChannel+0x24>
 836:	81 70       	andi	r24, 0x01	; 1
 838:	08 95       	ret
 83a:	26 b3       	in	r18, 0x16	; 22
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	c9 01       	movw	r24, r18
 840:	02 c0       	rjmp	.+4      	; 0x846 <DIO_ReadChannel+0x3c>
 842:	95 95       	asr	r25
 844:	87 95       	ror	r24
 846:	4a 95       	dec	r20
 848:	e2 f7       	brpl	.-8      	; 0x842 <DIO_ReadChannel+0x38>
 84a:	81 70       	andi	r24, 0x01	; 1
 84c:	08 95       	ret
 84e:	23 b3       	in	r18, 0x13	; 19
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	c9 01       	movw	r24, r18
 854:	02 c0       	rjmp	.+4      	; 0x85a <DIO_ReadChannel+0x50>
 856:	95 95       	asr	r25
 858:	87 95       	ror	r24
 85a:	4a 95       	dec	r20
 85c:	e2 f7       	brpl	.-8      	; 0x856 <DIO_ReadChannel+0x4c>
 85e:	81 70       	andi	r24, 0x01	; 1
 860:	08 95       	ret
 862:	20 b3       	in	r18, 0x10	; 16
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	c9 01       	movw	r24, r18
 868:	02 c0       	rjmp	.+4      	; 0x86e <__stack+0xf>
 86a:	95 95       	asr	r25
 86c:	87 95       	ror	r24
 86e:	4a 95       	dec	r20
 870:	e2 f7       	brpl	.-8      	; 0x86a <__stack+0xb>
 872:	81 70       	andi	r24, 0x01	; 1
 874:	08 95       	ret
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	08 95       	ret

0000087a <DIO_ReadPort>:
 87a:	81 30       	cpi	r24, 0x01	; 1
 87c:	41 f0       	breq	.+16     	; 0x88e <DIO_ReadPort+0x14>
 87e:	28 f0       	brcs	.+10     	; 0x88a <DIO_ReadPort+0x10>
 880:	82 30       	cpi	r24, 0x02	; 2
 882:	39 f0       	breq	.+14     	; 0x892 <DIO_ReadPort+0x18>
 884:	83 30       	cpi	r24, 0x03	; 3
 886:	39 f0       	breq	.+14     	; 0x896 <DIO_ReadPort+0x1c>
 888:	08 c0       	rjmp	.+16     	; 0x89a <DIO_ReadPort+0x20>
 88a:	8b b3       	in	r24, 0x1b	; 27
 88c:	08 95       	ret
 88e:	88 b3       	in	r24, 0x18	; 24
 890:	08 95       	ret
 892:	85 b3       	in	r24, 0x15	; 21
 894:	08 95       	ret
 896:	82 b3       	in	r24, 0x12	; 18
 898:	08 95       	ret
 89a:	80 e0       	ldi	r24, 0x00	; 0
 89c:	08 95       	ret

0000089e <DIO_WritePort>:
 89e:	81 30       	cpi	r24, 0x01	; 1
 8a0:	41 f0       	breq	.+16     	; 0x8b2 <DIO_WritePort+0x14>
 8a2:	28 f0       	brcs	.+10     	; 0x8ae <DIO_WritePort+0x10>
 8a4:	82 30       	cpi	r24, 0x02	; 2
 8a6:	39 f0       	breq	.+14     	; 0x8b6 <DIO_WritePort+0x18>
 8a8:	83 30       	cpi	r24, 0x03	; 3
 8aa:	39 f0       	breq	.+14     	; 0x8ba <DIO_WritePort+0x1c>
 8ac:	08 95       	ret
 8ae:	6b bb       	out	0x1b, r22	; 27
 8b0:	08 95       	ret
 8b2:	68 bb       	out	0x18, r22	; 24
 8b4:	08 95       	ret
 8b6:	65 bb       	out	0x15, r22	; 21
 8b8:	08 95       	ret
 8ba:	62 bb       	out	0x12, r22	; 18
 8bc:	08 95       	ret

000008be <DIO_ConfigureChannel>:
 8be:	98 2f       	mov	r25, r24
 8c0:	96 95       	lsr	r25
 8c2:	96 95       	lsr	r25
 8c4:	96 95       	lsr	r25
 8c6:	87 70       	andi	r24, 0x07	; 7
 8c8:	91 30       	cpi	r25, 0x01	; 1
 8ca:	21 f1       	breq	.+72     	; 0x914 <DIO_ConfigureChannel+0x56>
 8cc:	30 f0       	brcs	.+12     	; 0x8da <DIO_ConfigureChannel+0x1c>
 8ce:	92 30       	cpi	r25, 0x02	; 2
 8d0:	f1 f1       	breq	.+124    	; 0x94e <DIO_ConfigureChannel+0x90>
 8d2:	93 30       	cpi	r25, 0x03	; 3
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <DIO_ConfigureChannel+0x1a>
 8d6:	58 c0       	rjmp	.+176    	; 0x988 <DIO_ConfigureChannel+0xca>
 8d8:	08 95       	ret
 8da:	61 30       	cpi	r22, 0x01	; 1
 8dc:	69 f4       	brne	.+26     	; 0x8f8 <DIO_ConfigureChannel+0x3a>
 8de:	4a b3       	in	r20, 0x1a	; 26
 8e0:	21 e0       	ldi	r18, 0x01	; 1
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	b9 01       	movw	r22, r18
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <DIO_ConfigureChannel+0x2e>
 8e8:	66 0f       	add	r22, r22
 8ea:	77 1f       	adc	r23, r23
 8ec:	8a 95       	dec	r24
 8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <DIO_ConfigureChannel+0x2a>
 8f0:	cb 01       	movw	r24, r22
 8f2:	84 2b       	or	r24, r20
 8f4:	8a bb       	out	0x1a, r24	; 26
 8f6:	08 95       	ret
 8f8:	4a b3       	in	r20, 0x1a	; 26
 8fa:	21 e0       	ldi	r18, 0x01	; 1
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	b9 01       	movw	r22, r18
 900:	02 c0       	rjmp	.+4      	; 0x906 <DIO_ConfigureChannel+0x48>
 902:	66 0f       	add	r22, r22
 904:	77 1f       	adc	r23, r23
 906:	8a 95       	dec	r24
 908:	e2 f7       	brpl	.-8      	; 0x902 <DIO_ConfigureChannel+0x44>
 90a:	cb 01       	movw	r24, r22
 90c:	80 95       	com	r24
 90e:	84 23       	and	r24, r20
 910:	8a bb       	out	0x1a, r24	; 26
 912:	08 95       	ret
 914:	61 30       	cpi	r22, 0x01	; 1
 916:	69 f4       	brne	.+26     	; 0x932 <DIO_ConfigureChannel+0x74>
 918:	47 b3       	in	r20, 0x17	; 23
 91a:	21 e0       	ldi	r18, 0x01	; 1
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	b9 01       	movw	r22, r18
 920:	02 c0       	rjmp	.+4      	; 0x926 <DIO_ConfigureChannel+0x68>
 922:	66 0f       	add	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	8a 95       	dec	r24
 928:	e2 f7       	brpl	.-8      	; 0x922 <DIO_ConfigureChannel+0x64>
 92a:	cb 01       	movw	r24, r22
 92c:	84 2b       	or	r24, r20
 92e:	87 bb       	out	0x17, r24	; 23
 930:	08 95       	ret
 932:	47 b3       	in	r20, 0x17	; 23
 934:	21 e0       	ldi	r18, 0x01	; 1
 936:	30 e0       	ldi	r19, 0x00	; 0
 938:	b9 01       	movw	r22, r18
 93a:	02 c0       	rjmp	.+4      	; 0x940 <DIO_ConfigureChannel+0x82>
 93c:	66 0f       	add	r22, r22
 93e:	77 1f       	adc	r23, r23
 940:	8a 95       	dec	r24
 942:	e2 f7       	brpl	.-8      	; 0x93c <DIO_ConfigureChannel+0x7e>
 944:	cb 01       	movw	r24, r22
 946:	80 95       	com	r24
 948:	84 23       	and	r24, r20
 94a:	87 bb       	out	0x17, r24	; 23
 94c:	08 95       	ret
 94e:	61 30       	cpi	r22, 0x01	; 1
 950:	69 f4       	brne	.+26     	; 0x96c <DIO_ConfigureChannel+0xae>
 952:	44 b3       	in	r20, 0x14	; 20
 954:	21 e0       	ldi	r18, 0x01	; 1
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	b9 01       	movw	r22, r18
 95a:	02 c0       	rjmp	.+4      	; 0x960 <DIO_ConfigureChannel+0xa2>
 95c:	66 0f       	add	r22, r22
 95e:	77 1f       	adc	r23, r23
 960:	8a 95       	dec	r24
 962:	e2 f7       	brpl	.-8      	; 0x95c <DIO_ConfigureChannel+0x9e>
 964:	cb 01       	movw	r24, r22
 966:	84 2b       	or	r24, r20
 968:	84 bb       	out	0x14, r24	; 20
 96a:	08 95       	ret
 96c:	44 b3       	in	r20, 0x14	; 20
 96e:	21 e0       	ldi	r18, 0x01	; 1
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	b9 01       	movw	r22, r18
 974:	02 c0       	rjmp	.+4      	; 0x97a <DIO_ConfigureChannel+0xbc>
 976:	66 0f       	add	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	8a 95       	dec	r24
 97c:	e2 f7       	brpl	.-8      	; 0x976 <DIO_ConfigureChannel+0xb8>
 97e:	cb 01       	movw	r24, r22
 980:	80 95       	com	r24
 982:	84 23       	and	r24, r20
 984:	84 bb       	out	0x14, r24	; 20
 986:	08 95       	ret
 988:	61 30       	cpi	r22, 0x01	; 1
 98a:	69 f4       	brne	.+26     	; 0x9a6 <DIO_ConfigureChannel+0xe8>
 98c:	41 b3       	in	r20, 0x11	; 17
 98e:	21 e0       	ldi	r18, 0x01	; 1
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	b9 01       	movw	r22, r18
 994:	02 c0       	rjmp	.+4      	; 0x99a <DIO_ConfigureChannel+0xdc>
 996:	66 0f       	add	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	8a 95       	dec	r24
 99c:	e2 f7       	brpl	.-8      	; 0x996 <DIO_ConfigureChannel+0xd8>
 99e:	cb 01       	movw	r24, r22
 9a0:	84 2b       	or	r24, r20
 9a2:	81 bb       	out	0x11, r24	; 17
 9a4:	08 95       	ret
 9a6:	41 b3       	in	r20, 0x11	; 17
 9a8:	21 e0       	ldi	r18, 0x01	; 1
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	b9 01       	movw	r22, r18
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <DIO_ConfigureChannel+0xf6>
 9b0:	66 0f       	add	r22, r22
 9b2:	77 1f       	adc	r23, r23
 9b4:	8a 95       	dec	r24
 9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <DIO_ConfigureChannel+0xf2>
 9b8:	cb 01       	movw	r24, r22
 9ba:	80 95       	com	r24
 9bc:	84 23       	and	r24, r20
 9be:	81 bb       	out	0x11, r24	; 17
 9c0:	08 95       	ret

000009c2 <DIO_Init>:
 9c2:	80 e0       	ldi	r24, 0x00	; 0
 9c4:	a0 c0       	rjmp	.+320    	; 0xb06 <DIO_Init+0x144>
 9c6:	98 2f       	mov	r25, r24
 9c8:	96 95       	lsr	r25
 9ca:	96 95       	lsr	r25
 9cc:	96 95       	lsr	r25
 9ce:	28 2f       	mov	r18, r24
 9d0:	27 70       	andi	r18, 0x07	; 7
 9d2:	91 30       	cpi	r25, 0x01	; 1
 9d4:	61 f1       	breq	.+88     	; 0xa2e <DIO_Init+0x6c>
 9d6:	38 f0       	brcs	.+14     	; 0x9e6 <DIO_Init+0x24>
 9d8:	92 30       	cpi	r25, 0x02	; 2
 9da:	09 f4       	brne	.+2      	; 0x9de <DIO_Init+0x1c>
 9dc:	4c c0       	rjmp	.+152    	; 0xa76 <DIO_Init+0xb4>
 9de:	93 30       	cpi	r25, 0x03	; 3
 9e0:	09 f4       	brne	.+2      	; 0x9e4 <DIO_Init+0x22>
 9e2:	6d c0       	rjmp	.+218    	; 0xabe <DIO_Init+0xfc>
 9e4:	8f c0       	rjmp	.+286    	; 0xb04 <DIO_Init+0x142>
 9e6:	e8 2f       	mov	r30, r24
 9e8:	f0 e0       	ldi	r31, 0x00	; 0
 9ea:	ee 0f       	add	r30, r30
 9ec:	ff 1f       	adc	r31, r31
 9ee:	ea 59       	subi	r30, 0x9A	; 154
 9f0:	ff 4f       	sbci	r31, 0xFF	; 255
 9f2:	90 81       	ld	r25, Z
 9f4:	91 30       	cpi	r25, 0x01	; 1
 9f6:	69 f4       	brne	.+26     	; 0xa12 <DIO_Init+0x50>
 9f8:	9a b3       	in	r25, 0x1a	; 26
 9fa:	41 e0       	ldi	r20, 0x01	; 1
 9fc:	50 e0       	ldi	r21, 0x00	; 0
 9fe:	ba 01       	movw	r22, r20
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <DIO_Init+0x44>
 a02:	66 0f       	add	r22, r22
 a04:	77 1f       	adc	r23, r23
 a06:	2a 95       	dec	r18
 a08:	e2 f7       	brpl	.-8      	; 0xa02 <DIO_Init+0x40>
 a0a:	9b 01       	movw	r18, r22
 a0c:	29 2b       	or	r18, r25
 a0e:	2a bb       	out	0x1a, r18	; 26
 a10:	79 c0       	rjmp	.+242    	; 0xb04 <DIO_Init+0x142>
 a12:	9a b3       	in	r25, 0x1a	; 26
 a14:	41 e0       	ldi	r20, 0x01	; 1
 a16:	50 e0       	ldi	r21, 0x00	; 0
 a18:	ba 01       	movw	r22, r20
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <DIO_Init+0x5e>
 a1c:	66 0f       	add	r22, r22
 a1e:	77 1f       	adc	r23, r23
 a20:	2a 95       	dec	r18
 a22:	e2 f7       	brpl	.-8      	; 0xa1c <DIO_Init+0x5a>
 a24:	9b 01       	movw	r18, r22
 a26:	20 95       	com	r18
 a28:	29 23       	and	r18, r25
 a2a:	2a bb       	out	0x1a, r18	; 26
 a2c:	6b c0       	rjmp	.+214    	; 0xb04 <DIO_Init+0x142>
 a2e:	e8 2f       	mov	r30, r24
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	ee 0f       	add	r30, r30
 a34:	ff 1f       	adc	r31, r31
 a36:	ea 59       	subi	r30, 0x9A	; 154
 a38:	ff 4f       	sbci	r31, 0xFF	; 255
 a3a:	90 81       	ld	r25, Z
 a3c:	91 30       	cpi	r25, 0x01	; 1
 a3e:	69 f4       	brne	.+26     	; 0xa5a <DIO_Init+0x98>
 a40:	97 b3       	in	r25, 0x17	; 23
 a42:	41 e0       	ldi	r20, 0x01	; 1
 a44:	50 e0       	ldi	r21, 0x00	; 0
 a46:	ba 01       	movw	r22, r20
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <DIO_Init+0x8c>
 a4a:	66 0f       	add	r22, r22
 a4c:	77 1f       	adc	r23, r23
 a4e:	2a 95       	dec	r18
 a50:	e2 f7       	brpl	.-8      	; 0xa4a <DIO_Init+0x88>
 a52:	9b 01       	movw	r18, r22
 a54:	29 2b       	or	r18, r25
 a56:	27 bb       	out	0x17, r18	; 23
 a58:	55 c0       	rjmp	.+170    	; 0xb04 <DIO_Init+0x142>
 a5a:	97 b3       	in	r25, 0x17	; 23
 a5c:	41 e0       	ldi	r20, 0x01	; 1
 a5e:	50 e0       	ldi	r21, 0x00	; 0
 a60:	ba 01       	movw	r22, r20
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <DIO_Init+0xa6>
 a64:	66 0f       	add	r22, r22
 a66:	77 1f       	adc	r23, r23
 a68:	2a 95       	dec	r18
 a6a:	e2 f7       	brpl	.-8      	; 0xa64 <DIO_Init+0xa2>
 a6c:	9b 01       	movw	r18, r22
 a6e:	20 95       	com	r18
 a70:	29 23       	and	r18, r25
 a72:	27 bb       	out	0x17, r18	; 23
 a74:	47 c0       	rjmp	.+142    	; 0xb04 <DIO_Init+0x142>
 a76:	e8 2f       	mov	r30, r24
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	ee 0f       	add	r30, r30
 a7c:	ff 1f       	adc	r31, r31
 a7e:	ea 59       	subi	r30, 0x9A	; 154
 a80:	ff 4f       	sbci	r31, 0xFF	; 255
 a82:	90 81       	ld	r25, Z
 a84:	91 30       	cpi	r25, 0x01	; 1
 a86:	69 f4       	brne	.+26     	; 0xaa2 <DIO_Init+0xe0>
 a88:	94 b3       	in	r25, 0x14	; 20
 a8a:	41 e0       	ldi	r20, 0x01	; 1
 a8c:	50 e0       	ldi	r21, 0x00	; 0
 a8e:	ba 01       	movw	r22, r20
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <DIO_Init+0xd4>
 a92:	66 0f       	add	r22, r22
 a94:	77 1f       	adc	r23, r23
 a96:	2a 95       	dec	r18
 a98:	e2 f7       	brpl	.-8      	; 0xa92 <DIO_Init+0xd0>
 a9a:	9b 01       	movw	r18, r22
 a9c:	29 2b       	or	r18, r25
 a9e:	24 bb       	out	0x14, r18	; 20
 aa0:	31 c0       	rjmp	.+98     	; 0xb04 <DIO_Init+0x142>
 aa2:	94 b3       	in	r25, 0x14	; 20
 aa4:	41 e0       	ldi	r20, 0x01	; 1
 aa6:	50 e0       	ldi	r21, 0x00	; 0
 aa8:	ba 01       	movw	r22, r20
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <DIO_Init+0xee>
 aac:	66 0f       	add	r22, r22
 aae:	77 1f       	adc	r23, r23
 ab0:	2a 95       	dec	r18
 ab2:	e2 f7       	brpl	.-8      	; 0xaac <DIO_Init+0xea>
 ab4:	9b 01       	movw	r18, r22
 ab6:	20 95       	com	r18
 ab8:	29 23       	and	r18, r25
 aba:	24 bb       	out	0x14, r18	; 20
 abc:	23 c0       	rjmp	.+70     	; 0xb04 <DIO_Init+0x142>
 abe:	e8 2f       	mov	r30, r24
 ac0:	f0 e0       	ldi	r31, 0x00	; 0
 ac2:	ee 0f       	add	r30, r30
 ac4:	ff 1f       	adc	r31, r31
 ac6:	ea 59       	subi	r30, 0x9A	; 154
 ac8:	ff 4f       	sbci	r31, 0xFF	; 255
 aca:	90 81       	ld	r25, Z
 acc:	91 30       	cpi	r25, 0x01	; 1
 ace:	69 f4       	brne	.+26     	; 0xaea <DIO_Init+0x128>
 ad0:	91 b3       	in	r25, 0x11	; 17
 ad2:	41 e0       	ldi	r20, 0x01	; 1
 ad4:	50 e0       	ldi	r21, 0x00	; 0
 ad6:	ba 01       	movw	r22, r20
 ad8:	02 c0       	rjmp	.+4      	; 0xade <DIO_Init+0x11c>
 ada:	66 0f       	add	r22, r22
 adc:	77 1f       	adc	r23, r23
 ade:	2a 95       	dec	r18
 ae0:	e2 f7       	brpl	.-8      	; 0xada <DIO_Init+0x118>
 ae2:	9b 01       	movw	r18, r22
 ae4:	29 2b       	or	r18, r25
 ae6:	21 bb       	out	0x11, r18	; 17
 ae8:	0d c0       	rjmp	.+26     	; 0xb04 <DIO_Init+0x142>
 aea:	91 b3       	in	r25, 0x11	; 17
 aec:	41 e0       	ldi	r20, 0x01	; 1
 aee:	50 e0       	ldi	r21, 0x00	; 0
 af0:	ba 01       	movw	r22, r20
 af2:	02 c0       	rjmp	.+4      	; 0xaf8 <DIO_Init+0x136>
 af4:	66 0f       	add	r22, r22
 af6:	77 1f       	adc	r23, r23
 af8:	2a 95       	dec	r18
 afa:	e2 f7       	brpl	.-8      	; 0xaf4 <DIO_Init+0x132>
 afc:	9b 01       	movw	r18, r22
 afe:	20 95       	com	r18
 b00:	29 23       	and	r18, r25
 b02:	21 bb       	out	0x11, r18	; 17
 b04:	8f 5f       	subi	r24, 0xFF	; 255
 b06:	80 32       	cpi	r24, 0x20	; 32
 b08:	08 f4       	brcc	.+2      	; 0xb0c <DIO_Init+0x14a>
 b0a:	5d cf       	rjmp	.-326    	; 0x9c6 <DIO_Init+0x4>
 b0c:	08 95       	ret

00000b0e <SPI_Init>:
 b0e:	88 23       	and	r24, r24
 b10:	c9 f0       	breq	.+50     	; 0xb44 <SPI_Init+0x36>
 b12:	81 30       	cpi	r24, 0x01	; 1
 b14:	51 f5       	brne	.+84     	; 0xb6a <SPI_Init+0x5c>
 b16:	61 e0       	ldi	r22, 0x01	; 1
 b18:	8c e0       	ldi	r24, 0x0C	; 12
 b1a:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_ConfigureChannel>
 b1e:	61 e0       	ldi	r22, 0x01	; 1
 b20:	8d e0       	ldi	r24, 0x0D	; 13
 b22:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_ConfigureChannel>
 b26:	60 e0       	ldi	r22, 0x00	; 0
 b28:	8e e0       	ldi	r24, 0x0E	; 14
 b2a:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_ConfigureChannel>
 b2e:	61 e0       	ldi	r22, 0x01	; 1
 b30:	8f e0       	ldi	r24, 0x0F	; 15
 b32:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_ConfigureChannel>
 b36:	8d b1       	in	r24, 0x0d	; 13
 b38:	80 61       	ori	r24, 0x10	; 16
 b3a:	8d b9       	out	0x0d, r24	; 13
 b3c:	8d b1       	in	r24, 0x0d	; 13
 b3e:	80 64       	ori	r24, 0x40	; 64
 b40:	8d b9       	out	0x0d, r24	; 13
 b42:	08 95       	ret
 b44:	61 e0       	ldi	r22, 0x01	; 1
 b46:	8c e0       	ldi	r24, 0x0C	; 12
 b48:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_ConfigureChannel>
 b4c:	61 e0       	ldi	r22, 0x01	; 1
 b4e:	8d e0       	ldi	r24, 0x0D	; 13
 b50:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_ConfigureChannel>
 b54:	60 e0       	ldi	r22, 0x00	; 0
 b56:	8e e0       	ldi	r24, 0x0E	; 14
 b58:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_ConfigureChannel>
 b5c:	61 e0       	ldi	r22, 0x01	; 1
 b5e:	8f e0       	ldi	r24, 0x0F	; 15
 b60:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_ConfigureChannel>
 b64:	8d b1       	in	r24, 0x0d	; 13
 b66:	80 64       	ori	r24, 0x40	; 64
 b68:	8d b9       	out	0x0d, r24	; 13
 b6a:	08 95       	ret

00000b6c <SPI_TxRx>:
 b6c:	8f b9       	out	0x0f, r24	; 15
 b6e:	77 9b       	sbis	0x0e, 7	; 14
 b70:	fe cf       	rjmp	.-4      	; 0xb6e <SPI_TxRx+0x2>
 b72:	8f b1       	in	r24, 0x0f	; 15
 b74:	08 95       	ret

00000b76 <Timer1_init>:
 b76:	81 b3       	in	r24, 0x11	; 17
 b78:	80 62       	ori	r24, 0x20	; 32
 b7a:	81 bb       	out	0x11, r24	; 17
 b7c:	1d bc       	out	0x2d, r1	; 45
 b7e:	1c bc       	out	0x2c, r1	; 44
 b80:	87 e8       	ldi	r24, 0x87	; 135
 b82:	93 e1       	ldi	r25, 0x13	; 19
 b84:	97 bd       	out	0x27, r25	; 39
 b86:	86 bd       	out	0x26, r24	; 38
 b88:	82 e8       	ldi	r24, 0x82	; 130
 b8a:	8f bd       	out	0x2f, r24	; 47
 b8c:	88 e1       	ldi	r24, 0x18	; 24
 b8e:	8e bd       	out	0x2e, r24	; 46
 b90:	87 e7       	ldi	r24, 0x77	; 119
 b92:	91 e0       	ldi	r25, 0x01	; 1
 b94:	9b bd       	out	0x2b, r25	; 43
 b96:	8a bd       	out	0x2a, r24	; 42
 b98:	08 95       	ret

00000b9a <Timer1_90>:
 b9a:	84 ef       	ldi	r24, 0xF4	; 244
 b9c:	91 e0       	ldi	r25, 0x01	; 1
 b9e:	9b bd       	out	0x2b, r25	; 43
 ba0:	8a bd       	out	0x2a, r24	; 42
 ba2:	8e b5       	in	r24, 0x2e	; 46
 ba4:	82 60       	ori	r24, 0x02	; 2
 ba6:	8e bd       	out	0x2e, r24	; 46
 ba8:	8e b5       	in	r24, 0x2e	; 46
 baa:	81 60       	ori	r24, 0x01	; 1
 bac:	8e bd       	out	0x2e, r24	; 46
 bae:	08 95       	ret

00000bb0 <Timer1_0>:
 bb0:	87 e7       	ldi	r24, 0x77	; 119
 bb2:	91 e0       	ldi	r25, 0x01	; 1
 bb4:	9b bd       	out	0x2b, r25	; 43
 bb6:	8a bd       	out	0x2a, r24	; 42
 bb8:	08 95       	ret

00000bba <PWM_init>:
Uint8 g_OCR0;
Uint8 g_OCR1;
Uint8 g_OCR2;

void PWM_init(const PWM_configType * config_Ptr)
{
 bba:	fc 01       	movw	r30, r24
	if((config_Ptr->whichTimer) == TIMER_0)
 bbc:	80 81       	ld	r24, Z
 bbe:	81 11       	cpse	r24, r1
 bc0:	22 c0       	rjmp	.+68     	; 0xc06 <PWM_init+0x4c>
	{
		SetBit(DDRB,PB3);
 bc2:	87 b3       	in	r24, 0x17	; 23
 bc4:	88 60       	ori	r24, 0x08	; 8
 bc6:	87 bb       	out	0x17, r24	; 23
		TCNT0 = g_initialCount_T0;
 bc8:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <g_initialCount_T0>
 bcc:	82 bf       	out	0x32, r24	; 50
		OCR0  = g_OCR0;
 bce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <g_OCR0>
 bd2:	8c bf       	out	0x3c, r24	; 60
		SetBit(TCCR0,WGM01);
 bd4:	83 b7       	in	r24, 0x33	; 51
 bd6:	88 60       	ori	r24, 0x08	; 8
 bd8:	83 bf       	out	0x33, r24	; 51
		SetBit(TCCR0,WGM00);
 bda:	83 b7       	in	r24, 0x33	; 51
 bdc:	80 64       	ori	r24, 0x40	; 64
 bde:	83 bf       	out	0x33, r24	; 51
		TCCR0 = (TCCR0 & 0xCF) | ((config_Ptr->mode)<<4);
 be0:	23 b7       	in	r18, 0x33	; 51
 be2:	91 81       	ldd	r25, Z+1	; 0x01
 be4:	30 e1       	ldi	r19, 0x10	; 16
 be6:	93 9f       	mul	r25, r19
 be8:	c0 01       	movw	r24, r0
 bea:	11 24       	eor	r1, r1
 bec:	92 2f       	mov	r25, r18
 bee:	9f 7c       	andi	r25, 0xCF	; 207
 bf0:	89 2b       	or	r24, r25
 bf2:	83 bf       	out	0x33, r24	; 51
		TCCR0 = (TCCR0 & 0xF8) | (config_Ptr->clock);
 bf4:	83 b7       	in	r24, 0x33	; 51
 bf6:	92 81       	ldd	r25, Z+2	; 0x02
 bf8:	88 7f       	andi	r24, 0xF8	; 248
 bfa:	89 2b       	or	r24, r25
 bfc:	83 bf       	out	0x33, r24	; 51
		SetBit(TIMSK,TOIE0);
 bfe:	89 b7       	in	r24, 0x39	; 57
 c00:	81 60       	ori	r24, 0x01	; 1
 c02:	89 bf       	out	0x39, r24	; 57
 c04:	08 95       	ret
	}
	else if((config_Ptr->whichTimer) == TIMER_1)
 c06:	81 30       	cpi	r24, 0x01	; 1
 c08:	19 f1       	breq	.+70     	; 0xc50 <PWM_init+0x96>
	{

	}
	else if((config_Ptr->whichTimer) == TIMER_2)
 c0a:	82 30       	cpi	r24, 0x02	; 2
 c0c:	09 f5       	brne	.+66     	; 0xc50 <PWM_init+0x96>
	{
		SetBit(DDRD,PB7);
 c0e:	81 b3       	in	r24, 0x11	; 17
 c10:	80 68       	ori	r24, 0x80	; 128
 c12:	81 bb       	out	0x11, r24	; 17
		TCNT2 = g_initialCount_T2;
 c14:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <g_initialCount_T2>
 c18:	84 bd       	out	0x24, r24	; 36
		OCR2  = g_OCR2;
 c1a:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <g_OCR2>
 c1e:	83 bd       	out	0x23, r24	; 35
		SetBit(TCCR2,WGM21);
 c20:	85 b5       	in	r24, 0x25	; 37
 c22:	88 60       	ori	r24, 0x08	; 8
 c24:	85 bd       	out	0x25, r24	; 37
		SetBit(TCCR2,WGM20);
 c26:	85 b5       	in	r24, 0x25	; 37
 c28:	80 64       	ori	r24, 0x40	; 64
 c2a:	85 bd       	out	0x25, r24	; 37
		TCCR2 = (TCCR2 & 0xCF) | ((config_Ptr->mode)<<4);
 c2c:	25 b5       	in	r18, 0x25	; 37
 c2e:	91 81       	ldd	r25, Z+1	; 0x01
 c30:	30 e1       	ldi	r19, 0x10	; 16
 c32:	93 9f       	mul	r25, r19
 c34:	c0 01       	movw	r24, r0
 c36:	11 24       	eor	r1, r1
 c38:	92 2f       	mov	r25, r18
 c3a:	9f 7c       	andi	r25, 0xCF	; 207
 c3c:	89 2b       	or	r24, r25
 c3e:	85 bd       	out	0x25, r24	; 37
		TCCR2 = (TCCR2 & 0xF8) | (config_Ptr->clock);
 c40:	85 b5       	in	r24, 0x25	; 37
 c42:	92 81       	ldd	r25, Z+2	; 0x02
 c44:	88 7f       	andi	r24, 0xF8	; 248
 c46:	89 2b       	or	r24, r25
 c48:	85 bd       	out	0x25, r24	; 37
		SetBit(TIMSK,OCIE2);
 c4a:	89 b7       	in	r24, 0x39	; 57
 c4c:	80 68       	ori	r24, 0x80	; 128
 c4e:	89 bf       	out	0x39, r24	; 57
 c50:	08 95       	ret

00000c52 <PWM_changeDuty>:
	}
}

void PWM_changeDuty(const PWM_configType * config_Ptr,Uint8 a_duty)
{
	if((config_Ptr->whichTimer) ==TIMER_0)
 c52:	fc 01       	movw	r30, r24
 c54:	80 81       	ld	r24, Z
 c56:	81 11       	cpse	r24, r1
 c58:	02 c0       	rjmp	.+4      	; 0xc5e <PWM_changeDuty+0xc>
	{
		OCR0 = a_duty;
 c5a:	6c bf       	out	0x3c, r22	; 60
 c5c:	08 95       	ret
	}
	else if((config_Ptr->whichTimer) ==TIMER_1)
 c5e:	81 30       	cpi	r24, 0x01	; 1
 c60:	19 f0       	breq	.+6      	; 0xc68 <PWM_changeDuty+0x16>
	{

	}
	else if((config_Ptr->whichTimer) ==TIMER_2)
 c62:	82 30       	cpi	r24, 0x02	; 2
 c64:	09 f4       	brne	.+2      	; 0xc68 <PWM_changeDuty+0x16>
	{
		OCR2 = a_duty;
 c66:	63 bd       	out	0x23, r22	; 35
 c68:	08 95       	ret

00000c6a <PWM_TurnOff>:
	}
}

void PWM_TurnOff(){
	ClearBit(TCCR0,CS00);
 c6a:	83 b7       	in	r24, 0x33	; 51
 c6c:	8e 7f       	andi	r24, 0xFE	; 254
 c6e:	83 bf       	out	0x33, r24	; 51
	ClearBit(TCCR0,CS01);
 c70:	83 b7       	in	r24, 0x33	; 51
 c72:	8d 7f       	andi	r24, 0xFD	; 253
 c74:	83 bf       	out	0x33, r24	; 51
	ClearBit(TCCR0,CS02);
 c76:	83 b7       	in	r24, 0x33	; 51
 c78:	8b 7f       	andi	r24, 0xFB	; 251
 c7a:	83 bf       	out	0x33, r24	; 51
 c7c:	08 95       	ret

00000c7e <__tablejump2__>:
 c7e:	ee 0f       	add	r30, r30
 c80:	ff 1f       	adc	r31, r31
 c82:	05 90       	lpm	r0, Z+
 c84:	f4 91       	lpm	r31, Z
 c86:	e0 2d       	mov	r30, r0
 c88:	09 94       	ijmp

00000c8a <__itoa_ncheck>:
 c8a:	bb 27       	eor	r27, r27
 c8c:	4a 30       	cpi	r20, 0x0A	; 10
 c8e:	31 f4       	brne	.+12     	; 0xc9c <__itoa_ncheck+0x12>
 c90:	99 23       	and	r25, r25
 c92:	22 f4       	brpl	.+8      	; 0xc9c <__itoa_ncheck+0x12>
 c94:	bd e2       	ldi	r27, 0x2D	; 45
 c96:	90 95       	com	r25
 c98:	81 95       	neg	r24
 c9a:	9f 4f       	sbci	r25, 0xFF	; 255
 c9c:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__utoa_common>

00000ca0 <__utoa_ncheck>:
 ca0:	bb 27       	eor	r27, r27

00000ca2 <__utoa_common>:
 ca2:	fb 01       	movw	r30, r22
 ca4:	55 27       	eor	r21, r21
 ca6:	aa 27       	eor	r26, r26
 ca8:	88 0f       	add	r24, r24
 caa:	99 1f       	adc	r25, r25
 cac:	aa 1f       	adc	r26, r26
 cae:	a4 17       	cp	r26, r20
 cb0:	10 f0       	brcs	.+4      	; 0xcb6 <__utoa_common+0x14>
 cb2:	a4 1b       	sub	r26, r20
 cb4:	83 95       	inc	r24
 cb6:	50 51       	subi	r21, 0x10	; 16
 cb8:	b9 f7       	brne	.-18     	; 0xca8 <__utoa_common+0x6>
 cba:	a0 5d       	subi	r26, 0xD0	; 208
 cbc:	aa 33       	cpi	r26, 0x3A	; 58
 cbe:	08 f0       	brcs	.+2      	; 0xcc2 <__utoa_common+0x20>
 cc0:	a9 5d       	subi	r26, 0xD9	; 217
 cc2:	a1 93       	st	Z+, r26
 cc4:	00 97       	sbiw	r24, 0x00	; 0
 cc6:	79 f7       	brne	.-34     	; 0xca6 <__utoa_common+0x4>
 cc8:	b1 11       	cpse	r27, r1
 cca:	b1 93       	st	Z+, r27
 ccc:	11 92       	st	Z+, r1
 cce:	cb 01       	movw	r24, r22
 cd0:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <strrev>

00000cd4 <strrev>:
 cd4:	dc 01       	movw	r26, r24
 cd6:	fc 01       	movw	r30, r24
 cd8:	67 2f       	mov	r22, r23
 cda:	71 91       	ld	r23, Z+
 cdc:	77 23       	and	r23, r23
 cde:	e1 f7       	brne	.-8      	; 0xcd8 <strrev+0x4>
 ce0:	32 97       	sbiw	r30, 0x02	; 2
 ce2:	04 c0       	rjmp	.+8      	; 0xcec <strrev+0x18>
 ce4:	7c 91       	ld	r23, X
 ce6:	6d 93       	st	X+, r22
 ce8:	70 83       	st	Z, r23
 cea:	62 91       	ld	r22, -Z
 cec:	ae 17       	cp	r26, r30
 cee:	bf 07       	cpc	r27, r31
 cf0:	c8 f3       	brcs	.-14     	; 0xce4 <strrev+0x10>
 cf2:	08 95       	ret

00000cf4 <_exit>:
 cf4:	f8 94       	cli

00000cf6 <__stop_program>:
 cf6:	ff cf       	rjmp	.-2      	; 0xcf6 <__stop_program>
